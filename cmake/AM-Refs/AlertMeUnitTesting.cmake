function(add_alertme_test tname binary)
  set(bin_full_path ${EXECUTABLE_OUTPUT_PATH}/${binary})
  if(CHECK_BUILD)
    add_test(check_${tname} ${bin_full_path} ${ARGN})
  endif(CHECK_BUILD)
  if(MEMCHECK_BUILD)
    set(CMAKE_MEMORYCHECK_COMMAND valgrind)
    set(CMAKE_MEMORYCHECK_COMMAND_OPTIONS "--leak-check=full --show-reachable=yes --suppressions=${CMAKE_SOURCE_DIR}/cmake/valgrind.suppressions")
    set(memcheck_command "${CMAKE_MEMORYCHECK_COMMAND} ${CMAKE_MEMORYCHECK_COMMAND_OPTIONS}")
    separate_arguments(memcheck_command)
    add_test(memcheck_${tname} ${memcheck_command} ${bin_full_path} -n -N ${ARGN})
  endif(MEMCHECK_BUILD)
  if(COVERAGE_BUILD)
    FindGcov()
    FindLcov()
    add_definitions(-fprofile-arcs)
    add_definitions(-ftest-coverage)
    add_definitions(-DCOVERAGE)
    #set(coverage_command gcov)
    add_test(NAME coverage_${tname} COMMAND ${binary} ${ARGN})
    #setup_target_for_coverage(coverage_${tname} ${binary} ${tname}_cover)
  endif(COVERAGE_BUILD)
endfunction(add_alertme_test)

# needed for tests that load shared libraries
function(add_alertme_test_ld_library_path tname path)
  if(CHECK_BUILD)
    set_tests_properties(check_${tname}
      PROPERTIES ENVIRONMENT "LD_LIBRARY_PATH=${path}")
  endif(CHECK_BUILD)
  if(MEMCHECK_BUILD)
    set_tests_properties(memcheck_${tname}
      PROPERTIES ENVIRONMENT "LD_LIBRARY_PATH=${path}")
  endif(MEMCHECK_BUILD)
  if(COVERAGE_BUILD)
    set_tests_properties(coverage_${tname}
      PROPERTIES ENVIRONMENT "LD_LIBRARY_PATH=${path}")
  endif(COVERAGE_BUILD)
endfunction(add_alertme_test_ld_library_path)

macro(check_for_alertme_coverage liblist)
  DebugFlag(${liblist})
  if(COVERAGE_BUILD)
    set(${liblist} ${${liblist}} gcov )
  endif(COVERAGE_BUILD)
  DebugFlag(${liblist})
endmacro(check_for_alertme_coverage)
